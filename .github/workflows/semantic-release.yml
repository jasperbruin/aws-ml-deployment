name: Reusable Semantic Release

on:
  workflow_call:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual release)'
        required: false
        type: boolean
        default: false
      branches:
        description: 'Branches to release from (JSON array)'
        required: false
        type: string
        default: '["main"]'
      extra_plugins:
        description: 'Additional semantic-release plugins to install'
        required: false
        type: string
        default: ''
    outputs:
      new_release_published:
        description: 'Whether a new release was published'
        value: ${{ jobs.release.outputs.new_release_published }}
      new_release_version:
        description: 'The new release version'
        value: ${{ jobs.release.outputs.new_release_version }}
      new_release_git_tag:
        description: 'The new release git tag'
        value: ${{ jobs.release.outputs.new_release_git_tag }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release@23 \
            @semantic-release/git@10 \
            @semantic-release/changelog@6 \
            @semantic-release/github@10 \
            @semantic-release/commit-analyzer@12 \
            @semantic-release/release-notes-generator@13 \
            conventional-changelog-conventionalcommits@7 \
            ${{ inputs.extra_plugins }}

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ${{ inputs.branches }},
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "preset": "conventionalcommits",
                  "releaseRules": [
                    { "type": "feat", "release": "minor" },
                    { "type": "fix", "release": "patch" },
                    { "type": "perf", "release": "patch" },
                    { "type": "revert", "release": "patch" },
                    { "type": "docs", "release": "patch" },
                    { "type": "chore", "release": false },
                    { "type": "refactor", "release": "patch" },
                    { "type": "test", "release": false },
                    { "type": "build", "release": "patch" },
                    { "type": "ci", "release": false },
                    { "breaking": true, "release": "major" }
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      { "type": "feat", "section": "Features" },
                      { "type": "fix", "section": "Bug Fixes" },
                      { "type": "perf", "section": "Performance Improvements" },
                      { "type": "revert", "section": "Reverts" },
                      { "type": "docs", "section": "Documentation" },
                      { "type": "refactor", "section": "Code Refactoring" },
                      { "type": "build", "section": "Build System" }
                    ]
                  }
                }
              ],
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              "@semantic-release/github",
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md", "package.json"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ]
            ]
          }
          EOF

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔍 Running in DRY-RUN mode"
            npx semantic-release --dry-run
          else
            npx semantic-release
          fi

      - name: Output release info
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "🎉 New release published!"
          echo "Version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "Tag: ${{ steps.semantic.outputs.new_release_git_tag }}"
