name: Internal - AWS ECS Deploy (GHCR)

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
      ecs_cluster:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      task_definition_family:
        required: true
        type: string
      container_name:
        required: true
        type: string
      ghcr_image:
        description: 'Full GHCR image URI (e.g., ghcr.io/owner/repo:1.2.3)'
        required: true
        type: string
      aws_role_arn:
        required: false
        type: string
        default: ''
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Configure AWS (OIDC)
        if: inputs.aws_role_arn != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region: ${{ inputs.aws_region }}

      - name: Configure AWS (Keys)
        if: inputs.aws_role_arn == ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Get current task definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ inputs.task_definition_family }} \
            --query 'taskDefinition' > task-def.json

      - name: Update task definition with new image
        id: update-task-def
        run: |
          # Update the image in the task definition
          jq --arg IMAGE "${{ inputs.ghcr_image }}" \
             --arg CONTAINER "${{ inputs.container_name }}" \
             '.containerDefinitions |= map(
               if .name == $CONTAINER then .image = $IMAGE else . end
             ) | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
             task-def.json > updated-task-def.json
          
          cat updated-task-def.json

      - name: Register new task definition
        id: register
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "✅ Registered task definition: $TASK_DEF_ARN"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ inputs.ecs_cluster }} \
            --service ${{ inputs.ecs_service }} \
            --task-definition ${{ steps.register.outputs.task_def_arn }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          echo "⏳ Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ inputs.ecs_cluster }} \
            --services ${{ inputs.ecs_service }}
          
          echo "✅ Service deployment completed!"

      - name: Deployment summary
        run: |
          echo "## 🚀 ECS Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ inputs.ecs_cluster }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ inputs.ecs_service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ inputs.ghcr_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Task Definition**: ${{ steps.register.outputs.task_def_arn }}" >> $GITHUB_STEP_SUMMARY